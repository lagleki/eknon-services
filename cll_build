#!/bin/bash

usage() {
  echo "

Usage: $0 [-c] [-s] [-t] [-T target] [chapters]

-s: Replaces external xrefs in each chapter, so each chapter works standalone.

-t: Does what -s does, but also prevents most glossary processing so the glossary building goes much faster.

-c: Coverage mode.  Instead of using the normal chapter data, runs a special small file that is designed to do everything we ever do, but runs very quickly.  In this case, the 'chapters' argument is one or more coverage types to run.  Possible coverage types:

$(ls $(pwd)/coverage/*.xml | xargs -n 1 basename | sed 's/^coverage_//' | sed 's/\.xml$//')

-T target: Specifies the make target.  Most of them are obvious.  The _web targets copy stuff into your ~/public_html/ web space.  Complete list:

$(grep '^[a-z][a-z_]*:' scripts/Makefile | sed 's/:.*//' | sed 's/^/    /')

[chapters]: defaults to all chapters; if you specify less than all chapters, you must use -s or -t
"
  exit 1
}

optlist=""
run_chapters=""
coverage=""
builddir="$(pwd)/build" 
target="all"

while getopts "csthT:" opt
do
  case "$opt" in
    c)    coverage="true"
          run_chapters="true"
          ;;
    s)    optlist="$optlist -s"
          run_chapters="true"
          ;;
    t)    optlist="$optlist -t"
          run_chapters="true"
          ;;
    T)    target="$OPTARG";;
    [?h]) usage;;
  esac
done

if [ $OPTIND -gt 1 ]
then
  shift $(expr $OPTIND - 1)
fi

chapters="$*"

if [ "$target" = "coverage" -a "$optlist" ]
then
  echo "

Coverage is special; give no other options.

"

  usage
fi

if [ "$chapters" -a ! "$run_chapters" ]
then
  echo "

Since you specified chapters, you need to specify -s or -t.  -t is faster.

"

  usage
fi

# Set up defaults
if [ ! "$chapters" ]
then
  chapters="$(ls chapters/* | tr '\012' ' ')"
fi

if [ "$coverage" ]
then
  target="coverage"
  test=""
  new_chapters=""
  for chapter in $chapters
  do
    chap="coverage/coverage_$chapter.xml"
    if [ -f "$chap" ]
    then
      new_chapters="$new_chapters $chap"
    else
      echo "$chapter is not a valid coverage type"
      exit 1
    fi
  done
  chapters=$new_chapters
  builddir="$(pwd)/coverage/build"
fi

echo "chapters: $chapters"
echo "optlist: $optlist"
echo "target: $target"

# See if we need to delete the cll.xml before we run make
mkdir build
echo "$optlist $chapters" >build/chapter-list.new
if [ ! -f build/chapter-list ]
then
  touch build/chapter-list
fi

if [ "$(diff -q build/chapter-list build/chapter-list.new)" ]
then
  cp build/chapter-list.new build/chapter-list
  echo -e "\nChapter list differences found; forcing a re-merge.\n"
  rm -f cll.xml
fi

make -f scripts/Makefile builddir="$builddir" test="$optlist" chapters="$chapters" $target
